#!/usr/bin/python

# Original idea:
#   http://oranlooney.com/make-css-icons-python-image-library/
# Rewrite by:
#   Shish on behalf of Civicboom <shish@civicboom.com>

# This work is licensed under the Creative Commons Attribution 3.0 United
# States License. To view a copy of this license, visit
# http://creativecommons.org/licenses/by/3.0/us/ or send a letter to Creative
# Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

import os
import sys
import Image
from optparse import OptionParser


class MappedImage(object):
    def name_to_class(self, name):
        """
        >>> name_to_class("food/waffle_16.png")
        'food_waffle'
        """
        return name.replace("/", "-").replace(".png", "")[:-3]

    def __init__(self, filename, prefixLen=0):
        """
        Store some metadata on each icon
        """
        self.filename = filename
        self.css_class = self.name_to_class(filename[prefixLen:])
        self.image = Image.open(filename)
        self.w = self.image.size[0]
        self.h = self.image.size[1]
        self.x = -1
        self.y = -1

    def __lt__(a, b):
        return a.h > b.h


class Mapper(object):
    def log(self, msg, nl=True):
        if self.verbose:
            if nl:
                print msg
            else:
                print msg,

    def parse_args(self, args):
        """
        Get a list of filenames (and settings) from the command line
        """
        parser = OptionParser(usage="%prog [options] icon1.png icon2.png ...")
        parser.add_option("-q", "--quiet",
                action="store_false", dest="verbose", default=True,
                help="don't print status messages to stdout")
        parser.add_option("-c", "--css",
                dest="css_filename", default="icons.css",
                help="output filename for the CSS")
        parser.add_option("-p", "--png",
                dest="png_filename", default="icons.png",
                help="output filename for the PNG")
        parser.add_option("-a", "--path",
                dest="png_path", default=None,
                help="path for the CSS to refer to icons.png")
        return parser.parse_args()

    def get_images(self, filenames):
        """
        Take a list of filenames, return a list of MappedImage() objects
        """
        if not filenames:
            #parser.error("You need to specify some input files")
            print("You need to specify some input files")
            sys.exit(1)
        prefixLen = len(os.path.commonprefix(filenames))
        images = [MappedImage(filename, prefixLen) for filename in filenames]
        self.log("%d images will be combined." % len(images))
        return images

    def wibble(self, images):
        """
        Take a list of MappedImage() objects, adjust their x and y offsets
        until they don't overlap eachother
        """
        # this could be a lot more advanced - current it just puts all the
        # images into a single column
        #offset = 0
        #for image in images:
        #    image.x = 0
        #    image.y = offset
        #    offset = offset + image.h

        # wibbler #2: makes an image a few times as wide as the widest icon,
        # then lays out the icons in rows
        images.sort()
        width = max([i.w for i in images])
        width = width * min(5, len([i for i in images if i.w == width]))
        row_height = 0
        offset_y = 0
        offset_x = 0
        for image in images:
            if offset_x + image.w > width:
                offset_y = offset_y + row_height
                offset_x = 0
                row_height = 0
                next_row = True
            image.x = offset_x
            image.y = offset_y
            offset_x = offset_x + image.w
            row_height = max(row_height, image.h)

    def create_master(self, imgs):
        """
        Take a list of positioned MappedImage() objects, merge them into
        a single PIL Image()
        """
        size = max([i.x + i.w for i in imgs]), max([i.y + i.h for i in imgs])
        self.log("the master image will by %d by %d" % size)

        self.log("creating image...", False)
        master = Image.new(
            mode='RGBA',
            size=size,
            color=(0, 0, 0, 0))  # fully transparent
        self.log("created.")

        self.log("adding imgs...", False)
        for count, image in enumerate(imgs):
            self.log("\radding image %d..." % (count + 1), False)
            master.paste(image.image, (image.x, image.y))
        self.log("done.")

        return master

    def save_png(self, master, png_filename):
        """
        Save a PIL Image() as a PNG file
        """
        self.log("saving %s..." % png_filename, False)
        master.save(png_filename)
        self.log("saved.")

    def save_css(self, images, css_filename, png_filename):
        """
        Take a list of positioned MappedImage() objects, write out a CSS
        file listing each image's name and offset within the master PNG
        """
        self.log('saving %s...' % css_filename, False)
        iconCssFile = open(css_filename, 'w')
        iconCssFile.write("/* common bits */\n")
        for size in set([n.w for n in images]):
            iconCssFile.write(".icon%d {background-image:url(%s); display:inline-block; vertical-align:top;}\n" % (size, png_filename))
            iconCssFile.write(".icon%d span {display: none;}\n" % (size, ))
            iconCssFile.write(".icon%d {width: %dpx; height: %dpx;}\n" % (size, size, size))

        iconCssFile.write("\n/* autogenerated icons */\n")
        for image in images:
            iconCssFile.write('.icon%d.i_%s {background-position: %dpx %dpx;}\n' % (image.w, image.css_class, -image.x, -image.y))
        iconCssFile.close()
        self.log('created.')

    def main(self, args):
        """
        Run through the process
        """
        (options, filenames) = self.parse_args(args)
        self.verbose = options.verbose
        png_ref = options.png_path or options.png_filename

        images = self.get_images(filenames)
        self.wibble(images)
        self.save_png(self.create_master(images), options.png_filename)
        self.save_css(images, options.css_filename, png_ref)

        return 0

if __name__ == "__main__":
    sys.exit(Mapper().main(sys.argv))
