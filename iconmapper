#!/usr/bin/python

# Original:
#   http://oranlooney.com/make-css-icons-python-image-library/
# Extra bits:
#   Shish on behalf of Civicboom <shish@civicboom.com>

# This work is licensed under the Creative Commons Attribution 3.0 United 
# States License. To view a copy of this license, visit 
# http://creativecommons.org/licenses/by/3.0/us/ or send a letter to Creative
# Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

import os
import sys
import Image
from optparse import OptionParser

parser = OptionParser(usage="%prog [-q] [-c foo.css] [-p foo.png] icon1.png icon2.png ...")
parser.add_option("-q", "--quiet",
        action="store_false", dest="verbose", default=True,
        help="don't print status messages to stdout")
parser.add_option("-c", "--css",
        dest="css_filename", default="icons.css",
        help="output filename for the CSS")
parser.add_option("-p", "--png",
        dest="png_filename", default="icons.png",
        help="output filename for the PNG")
(options, args) = parser.parse_args()

if not args:
    parser.error("You need to specify some input files")

filenames = args
prefixLen = len(os.path.commonprefix(filenames))

iconMap = [(
        fn[prefixLen:].replace("/", "-").replace(".png", "")[:-3],
        fn
    ) for fn in filenames]

images = [Image.open(filename) for cssClass, filename in iconMap]
if options.verbose: print "%d images will be combined." % len(images)

master_width = max([i.size[0] for i in images])
master_height = sum([i.size[1] for i in images])
if options.verbose: print "the master image will by %d by %d" % (master_width, master_height)

if options.verbose: print "creating image...",
master = Image.new(
    mode='RGBA',
    size=(master_width, master_height),
    color=(0,0,0,0))  # fully transparent
if options.verbose: print "created."

if options.verbose: print "adding images...",
offset = 0
for count, image in enumerate(images):
    if options.verbose: print "\radding image %d..." % (count+1),
    master.paste(image,(0,offset))
    offset = offset + image.size[1]
if options.verbose: print "done."

if options.verbose: print "saving %s..." % options.png_filename,
master.save(options.png_filename)
if options.verbose: print "saved."



if options.verbose: print 'saving %s...' % options.css_filename,
offset = 0
iconCssFile = open(options.css_filename ,'w')
iconCssFile.write("/* common bits */\n")
for size in set([n.size[0] for n in images]):
    iconCssFile.write(".icon%d {background-image:url(%s); display:inline-block; vertical-align:top;}\n" % (size, options.png_filename))
    iconCssFile.write(".icon%d span {display: none;}\n" % (size, ))
    iconCssFile.write(".icon%d {width: %dpx; height: %dpx;}\n" % (size, size, size))

iconCssFile.write("\n/* autogenerated icons */\n")
for count, pair in enumerate(iconMap):
    cssClass, filename = pair
    iconCssFile.write('.icon%d.i_%s {background-position: 0px %dpx;}\n' % (images[count].size[0], cssClass, -offset) )
    offset = offset + images[count].size[1]
iconCssFile.close()
if options.verbose: print 'created.'


