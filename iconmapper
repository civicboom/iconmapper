#!/usr/bin/python

# Original:
#   http://oranlooney.com/make-css-icons-python-image-library/
# Extra bits:
#   Shish on behalf of Civicboom <shish@civicboom.com>

# This work is licensed under the Creative Commons Attribution 3.0 United
# States License. To view a copy of this license, visit
# http://creativecommons.org/licenses/by/3.0/us/ or send a letter to Creative
# Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.

import os
import sys
import Image
from optparse import OptionParser


class MappedImage(object):
    def name_to_class(self, name):
        return name.replace("/", "-").replace(".png", "")[:-3]

    def __init__(self, filename, prefixLen=0):
        self.filename = filename
        self.css_class = self.name_to_class(filename[prefixLen:])
        self.image = Image.open(filename)
        self.w = self.image.size[0]
        self.h = self.image.size[1]
        self.x = -1
        self.y = -1


class Mapper(object):
    def parse_args(self, args):
        parser = OptionParser(usage="%prog [-q] [-c foo.css] [-p foo.png] [-a /abs/path.png] icon1.png icon2.png ...")
        parser.add_option("-q", "--quiet",
                action="store_false", dest="verbose", default=True,
                help="don't print status messages to stdout")
        parser.add_option("-c", "--css",
                dest="css_filename", default="icons.css",
                help="output filename for the CSS")
        parser.add_option("-p", "--png",
                dest="png_filename", default="icons.png",
                help="output filename for the PNG")
        parser.add_option("-a", "--path",
                dest="png_path", default=None,
                help="path for the CSS to refer to icons.png")
        return parser.parse_args()

    def get_images(self, filenames):
        if not filenames:
            parser.error("You need to specify some input files")
        prefixLen = len(os.path.commonprefix(filenames))
        images = [MappedImage(filename, prefixLen) for filename in filenames]
        if self.verbose: print "%d images will be combined." % len(images)
        return images

    def wibble(self, images):
        offset = 0
        for image in images:
            image.x = 0
            image.y = offset
            offset = offset + image.h

    def create_master(self, images):
        size = max([i.x + i.w for i in images]), max([i.y + i.h for i in images])
        if self.verbose: print "the master image will by %d by %d" % size

        if self.verbose: print "creating image...",
        master = Image.new(
            mode='RGBA',
            size=size,
            color=(0, 0, 0, 0))  # fully transparent
        if self.verbose: print "created."

        if self.verbose: print "adding images...",
        for count, image in enumerate(images):
            if self.verbose: print "\radding image %d..." % (count + 1),
            master.paste(image.image, (image.x, image.y))
        if self.verbose: print "done."

        return master

    def save_png(self, master, png_filename):
        if self.verbose: print "saving %s..." % png_filename,
        master.save(png_filename)
        if self.verbose: print "saved."

    def save_css(self, images, css_filename, png_filename):
        if self.verbose: print 'saving %s...' % css_filename,
        iconCssFile = open(css_filename, 'w')
        iconCssFile.write("/* common bits */\n")
        for size in set([n.w for n in images]):
            iconCssFile.write(".icon%d {background-image:url(%s); display:inline-block; vertical-align:top;}\n" % (size, png_filename))
            iconCssFile.write(".icon%d span {display: none;}\n" % (size, ))
            iconCssFile.write(".icon%d {width: %dpx; height: %dpx;}\n" % (size, size, size))

        iconCssFile.write("\n/* autogenerated icons */\n")
        for image in images:
            iconCssFile.write('.icon%d.i_%s {background-position: %dpx %dpx;}\n' % (image.w, image.css_class, -image.x, -image.y))
        iconCssFile.close()
        if self.verbose: print 'created.'

    def main(self, args):
        (options, filenames) = self.parse_args(args)
        self.verbose = options.verbose

        images = self.get_images(filenames)
        self.wibble(images)
        self.save_png(self.create_master(images), options.png_filename)
        self.save_css(images, options.css_filename, options.png_path or options.png_filename)

        return 0

if __name__ == "__main__":
    sys.exit(Mapper().main(sys.argv))
